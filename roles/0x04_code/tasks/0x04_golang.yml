---

# fix version number upon new releases
- name: register current go version
  # # in case you need to hardcode a version
  # command: "/bin/echo 1.21.4"
  shell: "/usr/bin/curl -s 'https://go.dev/VERSION?m=text'|/usr/bin/head -1|/usr/bin/sed 's/go//'"
  register: go_version
  changed_when: false

- name: register current golang install path
  command: "/bin/echo /usr/local/lib/go-{{ go_version.stdout }}"
  register: current_go_path
  changed_when: false

- name: check of current golang is already installed
  stat:
    path: "{{ current_go_path.stdout }}"
  register: golang_installed
  changed_when: false

- name: remove /usr/local/go hardlink if present
  file:
    path: "/usr/local/go"
    state: absent
  when: not golang_installed.stat.exists

- name: register current golang release tarball name
  command: "/bin/echo go{{ go_version.stdout }}.linux-amd64.tar.gz"
  register: current_golang_release_tarball
  changed_when: false
  when: not golang_installed.stat.exists

- name: download official golang {{ go_version.stdout }}
  get_url:
    url: "https://dl.google.com/go/{{ current_golang_release_tarball.stdout }}"
    dest: "/tmp"
  when: not golang_installed.stat.exists

- name: unarchive and install golang
  unarchive:
    src: "/tmp/{{ current_golang_release_tarball.stdout }}"
    dest: "/usr/local/lib/"
    remote_src: true
  when: not golang_installed.stat.exists

- name: move folder to have a version number in the foldername for easier changes in the future
  command: "mv /usr/local/lib/go {{ current_go_path.stdout }}"
  when: not golang_installed.stat.exists

- name: remove extracted tarfile
  file:
    path: "/tmp/{{ current_golang_release_tarball.stdout }}"
    state: absent
  when: not golang_installed.stat.exists

- name: create link to /usr/local/go folder so golang env vars in bash environment will work
  file:
    src: "{{ current_go_path.stdout }}"
    dest: "/usr/local/go"
    state: link
    force: true

- name: check if gorun is installed
  stat:
    path: /home/sjas/go/bin/gorun
  register: gorun_installed

- name: install gorun if needed
  become: true
  become_user: sjas
  command: "{{ current_go_path.stdout }}/bin/go install -v github.com/erning/gorun@latest"
  when: not gorun_installed.stat.exists

# this was only done to not having to refer to /home/sjas/go/ in the next step
# - name: copy gorun binary if not already in in /usr/local/bin
#   copy:
#     src: /home/sjas/go/bin/gorun
#     dest: /usr/local/bin
#     mode: 0755
#     force: true

# https://en.wikipedia.org/wiki/Binfmt_misc
# cat /proc/sys/fs/binfmt_misc/golang  ## show runtime configuration
# echo -1 > /proc/sys/fs/binfmt_misc/golang  ## to remove during runtime
- name: make sure rc.local deploys binfmt string upon boot
  lineinfile:
    path: /etc/rc.local
    line: "echo ':golang:E::go::{{ lookup('ansible.builtin.env', 'GOPATH') }}/bin/gorun:OC' | tee /proc/sys/fs/binfmt_misc/register 1>/dev/null"
    insertbefore: "exit 0"
    state: present

- name: deploy golang 'dep' binary
  become: true
  become_user: sjas
  copy:
    src: dep
    dest: /home/sjas/.local/bin/
    mode: 0744
