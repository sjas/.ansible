# bash aliases
#
# shellcheck shell=bash

## 'EDIT BASH' CONFIG MANAGMENT
## 'RELOAD', 'DIFF', 'CD', 'SHOW ALIASES'
## LS(1)
## SUDO(1)
# UTIL
## ED(1);CAT(1);VIM(1)
## NOTES;PRV;WRK
## SHOW COMMANDS
## NETWORKING
## CODE
## SCRAPYARD





## 'EDIT BASH' CONFIG MANAGMENT #############################################################################
#'edit bash'
#"" = regular .bashrc, just needed for fixing includes and shit. all magic happens in the included files
#a  = aliases
#e  = environment
#g  = git
alias    eb="vim /home/sjas/.bashrc; 				            . /home/sjas/.bashrc; echo [+] .bashrc reloaded."
# shellcheck disable=SC2153,SC2139
alias   eba="vim ${DOTFILES}/roles/0x02_shells/files/.bashrc_aliases; 	. /home/sjas/.bashrc; echo [+] .bashrc reloaded."
# shellcheck disable=SC2139
alias  ebac="vim ${DOTFILES}/roles/0x02_shells/files/.bashrc_completion;	. /home/sjas/.bashrc; echo [+] .bashrc reloaded."
# shellcheck disable=SC2139
alias   ebe="vim ${DOTFILES}/roles/0x02_shells/files/.bashrc_env; 	    . /home/sjas/.bashrc; echo [+] .bashrc reloaded."
# shellcheck disable=SC2139
alias   ebg="vim ${DOTFILES}/roles/0x02_shells/files/.bashrc_git; 	    . /home/sjas/.bashrc; echo [+] .bashrc reloaded."
#local aliases go in here for inclusion
alias   ebi="vim /home/sjas/etc/.dotfiles/.bashrc_includes;     . /home/sjas/.bashrc; echo [+] .bashrc reloaded."
# v  = vim
# t  = terminator
# tm = tmux
# m  = mc
# p  = apt packages
# c  = vscode
# ce = vscode extensions
# k  = keyboard+mouse
# aa = ansible config
# shellcheck disable=SC2139
alias   ebv="vim ${DOTFILES}/roles/0x04_code/files/.vimrc"
# shellcheck disable=SC2139
alias	ebt="vim ${DOTFILES}/roles/0x03_terminals/files/config; cp -va ${DOTFILES}/roles/0x03_terminals/files/config /home/sjas/.config/terminator/config"
# shellcheck disable=SC2139
alias  ebtr="vim /home/sjas/.config/terminator/config; cp -va /home/sjas/.config/terminator/config ${DOTFILES}/roles/0x03_terminals/files/config "
# shellcheck disable=SC2139
alias  ebtm="vim /home/sjas/.tmux.conf; cp -va /home/sjas/.tmux.conf ${DOTFILES}/roles/0x03_terminals/files/.tmux.conf"
# shellcheck disable=SC2139
alias   ebm="vim ${DOTFILES}/roles/0x02_shells/files/ini; cp -va ${DOTFILES}/roles/0x02_shells/files/ini /home/sjas/.config/mc/ini"
# shellcheck disable=SC2139
alias   ebp="vim ${DOTFILES}/roles/0x01_common/tasks/0x02_packages.yml"
# shellcheck disable=SC2139
alias   ebc="vim /home/sjas/.config/Code/User/settings.json; cp -va /home/sjas/.config/Code/User/settings.json ${DOTFILES}/roles/0x04_code/files/settings.json"
# shellcheck disable=SC2139
alias  ebcp="vim ${DOTFILES}/roles/0x04_code/tasks/0x03_vscode.yml"
# shellcheck disable=SC2139
alias  ebck="vim /home/sjas/.config/Code/User/keybindings.json; cp -va /home/sjas/.config/Code/User/keybindings.json ${DOTFILES}/roles/0x04_code/files/keybindings.json"
# shellcheck disable=SC2139
alias   ebk="vim ${DOTFILES}/roles/0x05_kde/tasks/0x02_mouse-keyboard.yml;rea -t mouse"
# shellcheck disable=SC2139
alias  ebki="vim ${DOTFILES}/roles/0x05_kde/files/.imwheelrc;rea -t mouse"
# shellcheck disable=SC2139
alias   ebf="vim ${DOTFILES}/roles/0x06_browsers/files/user.js"
# shellcheck disable=SC2139
alias  ebaa="vim /home/sjas/.ansible.cfg"




## 'RELOAD', 'DIFF', 'CD', 'SHOW ALIASES' ###################################################################
# 'reload'
alias sb=". ~/.bashrc&&printf '\n.bashrc sourced.\n'"
alias reb=". ~/.bashrc&&printf '.bashrc sourced.'"
rea() {
	(
		cd "${DOTFILES}"||return
		ansible-playbook neon.yml "$@"
	)
}

#'diff bash' aliases (easily find out what changed after changes in the applications took place)
alias   dbt="wdiff -sdn <(diff -u4 /home/sjas/etc/.ansible/roles/0x03_terminals/files/config ~/.config/terminator/config) | colordiff"
alias	dbm="wdiff -sdn <(diff -u4 /home/sjas/etc/.ansible/roles/0x02_shells/files/mc_ini ~/.config/mc/ini) | colordiff"
alias	dbc="wdiff -sdn <(diff -u4 /home/sjas/etc/.ansible/roles/0x04_code/files/settings.json /home/sjas/.config/Code/User/settings.json) | colordiff"
alias   dbv="wdiff -sdn <(diff -u4 /home/sjas/etc/.ansible/roles/0x04_code/files/.vimrc ~/.vimrc) | colordiff"

# 'change directory'
# shellcheck disable=SC2139
alias   cdd="cd ${DOTFILES};git status -s"			    ## dotfiles
alias   cdc="cd /home/sjas/.config;git status -s"	    ## kde configs where the diffing takes plaace
# shellcheck disable=SC2139
alias  cddi="cd ${DOTFILES}/../.dotfiles;\ls"  	## dotfiles' includes

alias 	cds="cd /home/sjas/.ssh/controlmasters;\ls -Alhtr --color"
alias   cdw="__cdd /home/sjas/wrk"
alias  cdts="cd /home/sjas/ts;\ls -Alhtr --color"
alias    py="__cdd /home/sjas/wrk/py"
alias  rust="__cdd /home/sjas/wrk/rust"
alias golang="__cdd /home/sjas/wrk/golang"


# 'show aliases' (shows currently defined aliases)
# ba  = bash aliases
# ga  = git aliases
# shellcheck disable=SC2139
alias    sba="grep -e alias -e'()' ${DOTFILES}/roles/0x02_shells/files/.bashrc_aliases | grep -v ^# | sed 's/ {//g; s/alias\s\+//g' | sort | grep -e  ^.\*\(\) -e ^.\*= --color"
# shellcheck disable=SC2139
alias   sga="grep ^alias ${DOTFILES}/roles/0x02_shells/files/.bashrc_git | sed 's/alias //' | sort | grep -e ^.\*= --color"






## LS(1) ####################################################################################################
LS="/bin/ls"
LS_OPT1='--color=always --file-type -H'
LS_OPT2='-lisha --time-style=long-iso'
#FILES
# shellcheck disable=SC2139
alias     l="$LS		$LS_OPT1"
# shellcheck disable=SC2139
alias    ll="$LS -a		$LS_OPT1"
# shellcheck disable=SC2139
alias	 ls="$LS		$LS_OPT1 $LS_OPT2"
# shellcheck disable=SC2139
alias    lt="$LS		$LS_OPT1 $LS_OPT2 -tr"
# shellcheck disable=SC2139
alias    lS="$LS		$LS_OPT1 $LS_OPT2 -Sr"
alias    lr="find | sort | cut -c 3-"  ## so no additional package is needed
#DIRECTORIES
# shellcheck disable=SC2139
alias     d="$LS $LS_OPT1 -l --color=never -p  | grep ^d"
# shellcheck disable=SC2139
alias    dl="$LS $LS_OPT1 -l --color=never -aF | grep ^d"

#alias   wlk="watch -n1 -d -c $LS -h --color=always --time-style=long-iso -l -is -At"
# shellcheck disable=SC2139
alias   wlk="watch -n1 -d -c $LS -h --color=always --time-style=long-iso -l -iS -a --sort modified"

alias nnn="\nnn -c0"





## SUDO(1) ##################################################################################################
alias reboot="sudo reboot"
alias poweroff="sudo poweroff"

alias updatedb="sudo updatedb"
alias locate="sudo locate"

alias ee="dolphin ."
alias eer="sudo pcmanfm ."  ## dolphin wont let you sudo

alias htop="sudo htop -d2"
alias iotop="sudo iotop"
alias powertop="sudo powertop"

alias apt="sudo apt"
alias aptc="sudo apt clean; sudo apt autoremove"
alias aptg="sudo dpkg -l | grep"
alias pkcon="sudo pkcon -v"
alias dpkg="sudo dpkg"

alias bettercap="sudo bettercap"

alias fw="sudo firewall-cmd"
alias fwp="sudo firewall-cmd --runtime-to-permanent"
alias iptables="sudo iptables"

fwstatus ()
{
    _fwstate=$(sudo firewall-cmd --state 2>&1)
    printf "FIREWALLD=%s\n" "${_fwstate}"
    [[ "not running" == "${_fwstate}" ]]&&return
    _panicstate=$(sudo firewall-cmd --query-panic)
    if [[ "on" == "${_panicstate}" ]]
    then
        printf "\e[41;1m"
    else
        printf "\e[32;1m"
    fi
    printf "PANIC MODE=%s\e[m\n" "${_panicstate}"
    printf "LOCKDOWN=%s\n\n" "$(sudo firewall-cmd --query-lockdown)"
    _defaultzone=$(sudo firewall-cmd --get-default-zone)
    sudo firewall-cmd --list-all-zones | sed 's/^'"$_defaultzone"'/& (default)/' | sed -n '/^'"$_defaultzone"'\|active/,/^$/p' | grep --color=auto -v -e ':\s*$' | awk 'NF>0' | grep --color=auto --color -e$ -e^\\w.\\+
}


# colorize_iptables_output.sh: script deployed externally so inclusion works with watch(1)
# fw46_helper: abstraction for fw4/fw6
# fw46_watch_helper: abstraction for fw4w/fw6w

# fw4/fw6: shows a single chain given with parameters: "-L CHAIN_NAME [-t TABLE]" - or all chains from FILTER
# fw4d/fw6d: shows all default tables from iptables/ip6tables for FILTER table
# fw4w/fw6w: watch(1) a single chain given with parameters: "-L CHAIN_NAME [-t TABLE]" - or all chains from FILTER

# fws: 	shows only NAT and FILTER tables from both v4/v6
# fwsa: shows all tables, from both v4/v6, hopefully i have chosen a sane order from the documentation, see below

fw46_helper() {
	local IPTABLES="${1}";shift
	local HEADER_COLOR="31"

	echo -n $'\e['"${HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
	[[ "${IPTABLES}" == "iptables" ]] && echo -n "# v4" || echo -n "# v6"; echo " ${*:-INPUT}"
	echo -n $'\e['"${HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'

	sudo "${IPTABLES}" -vnx "${@:--L}" | colorize_iptables_output.sh
}
fw46_watch_helper() {
	local IPTABLES="${1}";shift
	watch -n1 -d -c "sudo ${IPTABLES} -vnx ${*:--L} | colorize_iptables_output.sh"
}
fw4() { fw46_helper iptables "${@}"; }
fw6() { fw46_helper ip6tables "${@}"; }
fw4w() { fw46_watch_helper iptables "${@}"; }
fw6w() { fw46_watch_helper ip6tables "${@}"; }
fws() {
	local HEADER_COLOR="33;1"
	local SUB_HEADER_COLOR="31"
	local IPTABLES=
	for IPTABLES in iptables ip6tables
	do
		echo -e '\n\n\n\n\n'
		echo -n $'\e['"${HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
		echo -n $'\e['"${HEADER_COLOR}"'m'; echo "# ${IPTABLES}"
		echo -n $'\e['"${HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
		echo -n $'\e[0m'
		cat << EOF | while read -r
-tnat
-tfilter
EOF
		do
			echo -n $'\e['"${SUB_HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
			echo -n $'\e['"${SUB_HEADER_COLOR}"'m'; echo "# $([[ ${IPTABLES} == iptables ]] && echo v4 || echo v6) $(echo "${REPLY}" | awk '{print $2}')"
			echo -n $'\e['"${SUB_HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
			echo -n $'\e[0m'
			sudo "${IPTABLES}" -L "${REPLY}" -vnx --line-numbers | colorize_iptables_output.sh
			echo -e '\n\n\n\n\n'
			done
		done
}
fwsa() {
	# this should be the order of how the chains are traversed, AFAICT (from docs, not source)
	# -t raw -L PREROUTING
	# -t mangle -L PREROUTING
	# -t nat -L PREROUTING
	# -t mangle -L INPUT
	# -t nat -L INPUT
	# -t filter -L INPUT
	# -t security -L INPUT
	# -t mangle -L FORWARD
	# -t filter -L FORWARD
	# -t security -L FORWARD
	# -t raw -L OUTPUT
	# -t mangle -L OUTPUT
	# -t nat -L OUTPUT
	# -t filter -L OUTPUT
	# -t security -L OUTPUT
	# -t mangle -L POSTROUTING
	# -t nat -L POSTROUTING

	local HEADER_COLOR="33;1"
	local SUB_HEADER_COLOR="31"
	local IPTABLES=
	for IPTABLES in iptables ip6tables
	do
		echo -e '\n\n\n\n\n'
		echo -n $'\e['"${HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
		echo -n $'\e['"${HEADER_COLOR}"'m'; echo "# ${IPTABLES}"
		echo -n $'\e['"${HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
		echo -n $'\e[0m'
		cat << EOF | while read -r
-traw
-tmangle
-tnat
-tfilter
-tsecurity
EOF
		do
			echo -n $'\e['"${SUB_HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
			echo -n $'\e['"${SUB_HEADER_COLOR}"'m'; echo "# $([[ ${IPTABLES} == iptables ]] && echo v4 || echo v6) $(echo "${REPLY}" | awk '{print $2}')"
			echo -n $'\e['"${SUB_HEADER_COLOR}"'m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'
			echo -n $'\e[0m'
			sudo "${IPTABLES}" -L "${REPLY}" -vnx --line-numbers | colorize_iptables_output.sh
			echo -e '\n\n\n\n\n'
			done
		done | less -R
}





## UTIL #####################################################################################################
# pp=="prettyprint" (pph w/ 80 chars, colored)
# pps=="prettyprintshort" (pph w/ 50 chars, uncolored)
# pph=="prettyprinthelper" (first argument is the amount of max possible chars)
pph() {
        [[ $# == 0 ]]&&echo "usage: pph _char _maxcharpos _asciicolor YOUR_RANDOM_STRING_STUFF"&&return
        local _char="$1";shift
        local _maxcharpos=$1;shift
        local _asciicolor="$1";shift
        local _inputstring="$*"
        #c="$(IFS=';' read -sdR -p $'\e[6n' ROW COL;echo "${ROW#*[}")"  ## cursorpos, unneeded
        local _inputstringsize=${#_inputstring}  ## we need stringlength instead
        local _terminalwidth=
        _terminalwidth="$(tput cols)"
        local _fillstringwidth=$(( _maxcharpos - 1 - _inputstringsize ))

        printf "\n\e[%sm%s" "${_asciicolor}" "${_inputstring}"
        if [[ ${_maxcharpos} -le ${_terminalwidth} ]]&&[[ ${_maxcharpos} -gt $(( _inputstringsize + 1 )) ]]
        then
                printf " "
                printf "${_char}%.0s" $( seq 1 ${_fillstringwidth} )
        elif [[ ${_maxcharpos} -gt ${_terminalwidth} ]]&&[[ ${_maxcharpos} -gt $(( _inputstringsize + 1 )) ]]
                then
                _fillstringwidth=$(( _terminalwidth - 1 - _inputstringsize ))
                printf " "
                printf "${_char}%.0s" $( seq 1 ${_fillstringwidth} )
        fi
        printf "\e[m\n"
}
pp() { pph '*' 109 '41;1' "$*";}
pps() { pph '+' 80 '' "$*";}

tail1() { find . -maxdepth 1 -type f -print0|xargs -0 tail -n +1|grep --color -e$ -e^==.\*; }
tail1r() { find . -type f -print0|xargs -0 tail -n +1|grep --color -e$ -e^==.\*; }
alias q="exit"
# shellcheck disable=SC2139
alias ..="cd ..; $LS $LS_OPT1 -l $LS_OPT2"
makedirectory(){
        if [[ $# == 0 ]]
        then
                pushd "$(mktemp -d)"||return
        else
                mkdir "$1"
                pushd "$1"||return
        fi

}
alias mkcd=makedirectory
the_missing_grep() {
	grep -i "$@"
}
alias g=the_missing_grep
the_missing_grep_v() {
	grep -i -v "$@"
}
alias gv=the_missing_grep_v
the_missing_grep_but_recursive() {
	grep -Hri "$@"
}
alias gr=the_missing_grep_but_recursive
the_missing_grep_but_recursive_to_less() {
	grep -Hri "$@"|less
}
alias grl="the_missing_grep_but_recursive_to_less"
alias rf="sudo rm -rf"
alias o="popd"
alias p="pushd"
alias v="vim"
alias watch='watch -n1 -d --color '
# shellcheck disable=SC2145
watchitallproper() {
	watch -n1 -d --color "$@"'|grep -v grep'
}
alias w="watchitallproper"
alias cf='tail -n +1 $(find . -maxdepth 1 -type f) | grep --color -e $ -e ^==.\*'
h() {
	[[ $# -lt 1 ]]&&history&& return
	history|grep -i "$*"
}
alias powershell="pwsh"

krestart() {
	for i in "$@"
	do
		pkill "$i"
		if [[ $i == "kwin" ]]
		then 
			kstart --replace kwin
		else
			kstart "$i"
		fi
	done
}

backup() {
	sudo cp -v "$1" "$1".bu
}
alias bu=backup
unbackup() {
	sudo cp -v "$1" "${1%%\.bu}"
}
alias unbu=unbackup
aptfilesearchupdate() {
	sudo apt-file update
}
alias afsu=aptfilesearchupdate
aptfilesearch() {
	apt-file search "$1"|grep /"$1"$
}
alias afs=aptfilesearch

datefromepoch() {
    if [[ $# -lt 1 ]]
	then
		echo specify epoch timestamp... ctrl+c to abort
		echo
		while :
		do
			read -rp"epoch> "
			date -d@"${REPLY}"
			echo
		done
	fi
	date -d@"$1"
}

datetoepoch() {
    if [[ $# -lt 1 ]]
	then
		echo specify YYYYmmdd or YYYYmmdd HHMM... ctrl+c to abort
		echo
		while :
		do
			read -rp"date> "
			local _date=
			local _time=
			_date="$(echo "${REPLY}"|awk '{print $1}')"
			_time="$(echo "${REPLY}"|awk '{print $2}')"
			[[ -z $_time ]]&&_time="0000"
			busybox date -D "%Y%m%d %H%M" -d "${_date} ${_time}" 
			busybox date -D "%Y%m%d %H%M" -d "${_date} ${_time}" +%s
			echo
		done
	fi
	local _inputdate="$*"
	[[ $# -lt 2 ]]&&_inputdate="${_inputdate}0000"
	busybox date -D "%Y%m%d %H%M" -d "${_inputdate}" 
    busybox date -D "%Y%m%d %H%M" -d "${_inputdate}" +%s
}

alias cpr="rsync -avhH --progress"
alias cpz="rsync -avzhH --progress"
alias bc='BC_ENV_ARGS=<(echo "scale=2") \bc'

#https://stackoverflow.com/questions/3001177/how-do-i-grep-for-all-non-ascii-characters
alias findallunicodechars='find|xargs grep --color=auto -P -n "[^\x00-\x7F]" 2>/dev/null'

alias rec='script -aq ~/term.log-$(date "+%Y%m%d-%H-%M")'
rammed() {
    watch -n1 -d "ps aux | awk '{print \$6/1024\"M \" \$11}\' | sed 's/\.[[:digit:]]\+M/M/' | sort -rhk1,1 | head -25 | column -t"
}
alias ram=rammed

# shellcheck disable=SC2139
alias apt-list-backports="aptitude search -t $(lsb_release -sc)-backports -F '%p %v -> %V' '~U ~Abackports'"
# shellcheck disable=SC2139
alias apt-list-changelog="apt-get changelog -t $(lsb_release -sc)-backports"

#v4test
#for i in 0 $(ip -4 r | grep default | awk '{print $3}' | head -1) 1.1 one.one.one.one; do if ping -4 -c1 -W1 $i &>/dev/null; then echo -n $'\e[32;1m'; else echo -n $'\e[31;1m'; fi; echo $i$'\e[0m'; done
#
#v6test
#for i in :: $(ip -6 r | grep default | awk '{print $3}' | head -1) 2606:4700:4700::1001 one.one.one.one; do if ping -6 -c1 -W1 $i &>/dev/null; then echo -n $'\e[32;1m'; else echo -n $'\e[31;1m'; fi; echo $i$'\e[0m'; done

kk() { [[ $# -lt 1 ]]&&echo no input given&&return;info -k "$1";echo;man -k "$1"; }
vm() { man "$1" | col -b | vim -MR --not-a-term -c "set ft=man nomod nolist hls is" -; }
m() {
	PAGER="cat" man "$1" | grep ^\\w | sed '1d;$d'
	echo
	read -p"> " -r
	LESS="+/^${REPLY}" man "$1"
}
ms() {
        dpkg -s dialog &>/dev/null || { echo "Needs 'dialog' package which is not installed on this system!" && return; }
        [[ $# -lt 1 ]] && echo 'Man page name consisting of a single word expected but not given.' && return
        MANPAGE=$1
        [[ -n $2 ]] && DEFAULTCHOICE=$2 || DEFAULTCHOICE='0'
        man "${MANPAGE}" > /dev/null 2>&1 || { echo "${MANPAGE}" man page not present on this system!; return; }
        mapfile -t OUTLINE < <(PAGER="cat" man "${MANPAGE}" | grep ^\\w | grep -v -e AUTHORS -e COPYRIGHT | sed '1d;$d')
        RESULTSIZE="${#OUTLINE[*]}"
		# shellcheck disable=SC2046
        CHOICE=$(
                dialog --colors --keep-tite --default-item "$DEFAULTCHOICE" --menu "$(
                        echo -n \\Zb\\Z3 "${MANPAGE}" | tr '[:lower:]' '[:upper:]'
                ) man page" $(( RESULTSIZE + 8 )) 55 "${RESULTSIZE}" $(
                        COUNT=0
                        for i in $( seq 0 $(( ${#OUTLINE[@]} - 1 )) )
                        do
                                echo -n "${COUNT}"
								# shellcheck disable=SC2001
                                echo -n " $( echo "${OUTLINE[i]}" | sed 's/ /\_/g' ) "
                                (( COUNT++ ))
                        done
                ) 2>&1 >/dev/tty || echo CANCEL
        )
        [[ "$CHOICE" =~ "CANCEL" ]] && return
		# shellcheck disable=SC2001
        MANPAGER="less +/^$( echo "${OUTLINE[$CHOICE]}" | sed 's/ /\\ /g' )" man "${MANPAGE}"
        ms "${MANPAGE}" "${CHOICE}"
}

#alias logoff="loginctl terminate-user sjas"  ## deprecated
alias logoff="qdbus org.kde.ksmserver /KSMServer logout 0 3 3"
alias k_suspendcomposite='qdbus org.kde.kglobalaccel /component/kwin invokeShortcut "Suspend Compositing"'
alias k_increaseopacity='qdbus org.kde.kglobalaccel /component/kwin invokeShortcut "Increase Opacity"'
alias k_decreaseopacity='qdbus org.kde.kglobalaccel /component/kwin invokeShortcut "Decrease Opacity"'
alias synchotkeysback='cp -va /home/sjas/.config/kglobalshortcutsrc /home/sjas/.config/khotkeysrc  /home/sjas/etc/.ansible/roles/0x05_kde/files/'

alias swapdo="sudo swapoff -a;sudo swapon -a"
alias rg="rg --hidden -i --glob '!\.git/'"
alias mc=". /usr/share/mc/bin/mc-wrapper.sh"
tw () { tweep -u sjashc -s "$1" | grep -i -e "^\d+" -e "$1"; }
alias gg=global
syscalls_h() {
    if [[ $# != 0 ]]
    then
        sudo bpftrace -l tracepoint:syscalls | grep sys_enter | sed 's/.*sys_enter_//g' | sort | xargs 2>/dev/null whatis | grep --color -e $ -e '^[^[:space:]]\+' | grep "$1" --color
    else
        sudo bpftrace -l tracepoint:syscalls | grep sys_enter | sed 's/.*sys_enter_//g' | sort | xargs 2>/dev/null whatis | grep --color -e $ -e '^[^[:space:]]\+'
    fi
}
alias syz=syscalls_h
bpf_h() {
    for i in $(sudo bpftrace -l | awk -F: '{print $1}' | sort | uniq); do printf "\e[41;1m%s\e[m\n" "$i"; sudo bpftrace -l "${i}": | awk -F: '{print $2}' | sort | uniq -c | awk 'NF>1{print $0}'; done | less -R +/^tracepoint
}
alias bpf=bpf_h

alias ssha='eval $(ssh-agent) && ssh-add'
alias pipestatus='echo ${PIPESTATUS[@]}'

rotng() {
    [[ $# -ne 0 ]] && echo "$@" | tr 'A-Za-z0-9' 'N-ZA-Mn-za-m5-90-4' && return
    tr 'A-Za-z0-9' 'N-ZA-Mn-za-m5-90-4'
}
alias r=rotng

alias rss='rsync -avzh --inplace --info=progress2'

alias nload='nload -u m -U H -i 102400 -o 102400 -a 60'  ## 100m graphs
alias nload1g='nload -u m -U H -i 1024000 -o 1024000 -a 60'  ## 1g graphs

# shellcheck disable=SC2142
alias topcommands="history | awk '{CMD[\$3]++;count++;} END { for (i in CMD)print CMD[i] \" \" CMD[i]/count*100 \"% \" i;}' | grep -v \"./\" | column -c3 -s\" \" -t | sort -nr | head -20 | nl"
# shellcheck disable=SC2139
# shellcheck disable=SC2142
alias kdeversion="dpkg -l | awk -F'[:-]' '/plasma-desktop\s/{print \$3}'"
alias ansibletags="( cd /home/sjas/etc/.ansible; rg -e '^\s+tags:' --no-filename --no-line-number | sort | uniq | awk 'NR>1' )"

fdiff() {
	wdiff -n "$1" "$2" | colordiff
}
x2d() {
	printf "%d\n" "$1"
}

#OPENSSL
alias oxk='openssl rsa -noout -text -in'
alias oxr='openssl req -noout -text -in'
alias oxc='openssl x509 -noout -text -in'

#XCLIP like pb{copy,paste} on osx
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

# hex2dec and dec2hex
# shellcheck disable=SC2059
xd() {
    printf "hex> "
    while read -r i
    do
        printf "dec  $(( 0x${i} ))\n\nhex> "
    done
}
dx() {
    printf "dec> "
    while read -r i
    do
        printf 'hex  %x\n\ndec> ' "$i"
    done
}





## ED(1);CAT(1);VIM(1) ######################################################################################
#ED
ed() { command ed -v -s "$@";}  ## dont use the prompt, is ugly for automation
e() { command ed -v -p\* "$@";}

#VI
# hosts		= /etc/hosts
# ssh		= ~/.ssh/config
# if		= /etc/network/interfaces
alias vihosts="sudo vim /etc/hosts"
alias viresolv="sudo vim /etc/resolv.conf"
alias vissh="vim /home/sjas/.ssh/config"
alias visshcl="vim /home/sjas/.cloginrc"
alias viif="sudo vim /etc/network/interfaces"
alias vinss="sudo vim /etc/nsswitch.conf"

#CAT
# hosts		= /etc/hosts
# ssh		= ~/.ssh/config
# pub		= id_rsa.pub
# sh		= current shell type
# ip		= get upstream ip
# attr		= list ext4 extended attributes and supported kernel versions
# keys		= list bash shortcuts
# fonts		= list system font names
alias cathosts="cat /etc/hosts"
alias catssh="cat /home/sjas/.ssh/config"
catpub() {
	for i in id_rsa id_ecdsa id_ecdsa_sk id_ed25519 id_ed25519_sk id_dsa
	do
		if [[ -f /home/sjas/.ssh/$i ]]
		then
			pp "$i"
			cat /home/sjas/.ssh/"$i".pub 2>/dev/null||echo PUBKEY MISSING
		fi
	done
}
alias catgi="cat .gitignore"
# shellcheck disable=SC2142,SC2139
alias catsh="ps -p $$ |& tail -1 | awk '{ print \$4 }'"
alias catip="curl -s telnetmyip.com| jq -r '.ip'"
alias catattr="PAGER=cat man ext4 | sed -n '/^FILE ATTRIBUTES/,/SEE ALSO/p' | grep -v SEE\ ALSO | awk 'NF>0'"
alias catkeys="PAGER=cat man bash | grep '([CM]-\|ESC' | grep ')$' --color=none | sort -nk1,1 | grep -v 'meta\ key' | sed 's/ /|/g; s/^|\+//; s/|(/ (/' | column -t | sed 's/|/ /g; s/^/        /; s/(//; s/)$//'"
# shellcheck disable=SC2142
alias catfonts="fc-list | awk '{\$1=\"\"}1' | cut -d: -f1 | sort| uniq"
# shellcheck disable=SC2154
alias catredirection='PAGER="cat" man bash | sed -n "/^REDIRECTION/,/ALIASES/p" | sed "\$d"'





## NOTES;PRV;WRK ############################################################################################
# shellcheck disable=SC2034
   _folder_notes="/home/sjas/n"
_folder_docs_prv="/home/sjas/dp"
_folder_docs_wrk="/home/sjas/dw"

#`cd{p,w}` for `cd {prv,wrk}` cant be abbreviated; use `cd;{prv,wrk}` instead
alias cddn='__cdd "${_folder_notes}"'
alias cddp='__cdd "${_folder_docs_prv}"'
alias cddw='__cdd "${_folder_docs_wrk}"'
# shellcheck disable=SC2012
__cdd() { cd "$1"||return;ls;}  ## show latest modified last

alias n='__d vim "${_folder_notes}"'
alias dp='__d vim "${_folder_docs_prv}"'
alias dw='__d vim "${_folder_docs_wrk}"'

alias cn='__d cat "${_folder_notes}"'
alias cdp='__d cat "${_folder_docs_prv}"'
alias cdw='__d cat "${_folder_docs_wrk}"'

# shellcheck disable=SC2012
__d() {
	local _upstream="gitlab.sjas.de"
    local _binary=$1;shift
    local _folder=$1;shift
    #if no argument is given, vim will open the folder so you have files to choose
    #any other binary will just get the folder contents printed
    ! [[ "vim" == "${_binary}" ]]&&[[ $# -eq 0 ]]&&echo&&\ls -1 --sort=time -r "${_folder}"&&echo&&return  ## shift changes $#
    __pull_from_git "${_folder}" "$*"
    "${_binary}" "${_folder}"/"$*"
    __push_to_git "${_folder}" "$*"
}
__pull_from_git() {
    local _folder="$1";shift
    if ping -c1 -W1 "${_upstream}" >/dev/null 2>&1
    then
        cd "${_folder}"||return
        git add "$*"
        git commit -m "update $*"
        git pull
        cd -||return
    fi
}

__push_to_git() {
    local _folder="$1";shift
    if ping -c1 -W1 "${_upstream}" >/dev/null 2>&1
    then
        cd "${_folder}"||return
        git add "$*"
        git commit -m "update $*"
        git pull
        git push
        git status -s
        cd -||return
    fi
}
__dautocompletion() {
    local _word="${COMP_WORDS[$COMP_CWORD - 1]}"
    local _cur="${COMP_WORDS[COMP_CWORD]}"


    __autocompletehelper() {
        local _folder=$1;shift
        local _files="";_files="$(\ls -1 "${_folder}")"
        mapfile -t COMPREPLY < <(compgen -W "${_files}" -- "${_cur}")
     }

    case "${_word}" in
        n|cn)   __autocompletehelper "${_folder_notes}" ;;
        dp|cdp) __autocompletehelper "${_folder_docs_prv}" ;;
        dw|cdw) __autocompletehelper "${_folder_docs_wrk}" ;;
    esac
}&&complete -F __dautocompletion n dp dw cn cdp cdw





## SHOW COMMANDS ############################################################################################
# apt
# net
# net4
# net6
# ru
# r
# du
# df
# proc
# sym
# diff
showapt() {
	watch -n 1 -d 'ps auxww | grep -e apt -e dpkg | grep -v -e '--adaptive' -e grep | cut -c 68-'
}
shownet() {
	watch -n 1 -d 'ip -s -d l; echo; echo =================================================================; echo; ip -d r; echo; ip -d a; echo; ps aux | grep openvpn | grep -v -e sudo -e grep'
}
shownet4() {
	watch -n 1 -d 'ip -d -4 r; echo; ip -s -d -4 a | grep -v lft; echo; ps aux | grep openvpn | grep -v -e sudo -e grep'
}
shownet6() {
	watch -n 1 -d 'echo; ip -d -6 r; echo; ip -d -6 a; echo; ps aux | grep openvpn | grep -v -e sudo -e grep'
}
showgw()  {
	_pinghelper() {
		pp "$3: $1 && $2"
		ping -4 -c1 -W1 "$1"|grep -E 'from|,'||echo FAILED
		ping -6 -c1 -W1 "$2"|grep -E 'from|,'||echo FAILED
	}
	_pinghelper 0 ::1 localhost
	_gw4=$(ip -4 r|grep default|awk '{print $3}')
	_gw6=$(ip -6 r|grep default|awk '{print $3}')
	_pinghelper "${_gw4}" "${_gw6}" defgw
	_pinghelper 1.1 2606:4700:4700::1111 remote-ip
	_pinghelper ix.de ix.de remote-dns
}
showdns() {
	watch -n1 -d 'ls -alh /etc/resolv.conf; echo; fd resolv.conf /run/ | xargs tail -n +1 | grep -v ^# | sed "s/==/=================================/g"'
}
showru() {
	#echo; ip ru; echo; for i in $(ip ru | awk '{print $1}' | tr -d ':'); do echo; echo $'\e[33;1m'"$i $(ip ru | grep -e "^$i:" | awk '{print $NF}')"; echo ================$'\e[0m'; ip -d r l t "$i" | sed 's/\(default\)\s\+\(via\)\s\+/\1_\2_/g' | column -t | sort -k1; done | sed 's/default_via_/default via /'
	echo
	ip ru
	echo
	for i in $(ip ru | awk '{print $1}' | tr -d ':')
	do
		echo
		echo $'\e[33;1m'"$i $(ip ru | grep -e "^$i:" | awk '{print $NF}')"
		echo ================$'\e[0m'
		ip -d r l t "$i"\
			|sed 's/\(default\)\s\+\(via\)\s\+/\1_\2_/g' \
			| column -t \
			| sort -k1
	done|sed 's/default_via_/default via /'
}
showr() {
	#( echo DST GW DEV PROTO SCOPE SRC METRIC; while read -r j; do if ! echo "$j" | grep -q src; then echo "${j/metric/ . . metric}"; else echo "$j"; fi; done < <(while read -r i; do if ! echo "$i" | grep -q via ; then echo "${i/dev/ . . dev}"; else echo "$i"; fi; done  < <(ip -d r)) | awk '{print $2" "$4" "$6" "$8" "$10" "$12" "$14}' ) | column -t | sed 's/\(\s\)\.\(\s\)/\1 \2/g'
	(
		echo DST GW DEV PROTO SCOPE SRC METRIC
		while read -r j
		do
			if ! echo "$j"|grep -q src
			then
				echo "${j/metric/ . . metric}"
			else
				echo "$j"
			fi
		done < <(
			while read -r i
			do
				if ! echo "$i" | grep -q via
				then
					echo "${i/dev/ . . dev}"
				else
					echo "$i"
				fi
			done  < <(ip -d r)) \
				|awk '{print $2" "$4" "$6" "$8" "$10" "$12" "$14}'
	) \
		|column -t \
		|sed 's/\(\s\)\.\(\s\)/\1 \2/g'
}
showdu() {
	du -sh ../* | sort -hk1
}
showdf() {
	watch -n 1 -d 'df -h'
}
showproc() {
	for i in $(find /proc -maxdepth 1 -type f | grep -v -e kallsyms -e sched_debug -e kcore -e kmsg -e kpagecgroup -e kpagecount -e kpageflags -e sysrq-trigger -e vmallocinfo); do echo -n $'\e[1;33m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'; echo $'\e[1;33m'"# $i"; echo -n $'\e[1;33m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'; echo -en '\e[0m'; sudo cat "$i"; echo -e '\n\n\n\n\n'; done | less -RNS
}
showsym() {
	for i in $(find /proc -maxdepth 1 -type f | grep -e kallsyms -e sched_debug -e vmallocinfo); do echo -n $'\e[1;33m'; printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'; echo $'\e[1;33m'"# $i"; echo -n $'\e[1;33m'; printf "%*s\n" "${COLUMNS:-$(tput cols)}" '' | tr ' ' '#'; echo -en '\e[0m'; sudo cat "$i"; echo -e '\n\n\n\n\n'; done | less -RNS
}
showdiff() {
	wdiff -sdn <(diff -u4 "$1" "$2") | colordiff
}





## NETWORKING ###############################################################################################
# FIXME: here is quite some shit to finish
# fix up missing radb / cymru functions
# make the existing ones take parameters
# build in a security prompt for the route aliases asking wether the queried ASN is the right one
td(){
    ssh "$1" "sudo echo; sudo ip a|grep -v valid_lft"
	echo
    read -p"interface> "
    # shellcheck disable=SC2029
	ssh "$1" "sudo tcpdump -U -s0 -i ${REPLY} \"not (host \$(echo \$SSH_CLIENT|awk '{print \$1}') and port \$(echo \$SSH_CLIENT|awk '{print \$3}'))\" -w-"|wireshark -ki-
}

ipcalced() {
    [[ $# -eq 1 ]] && \ipcalc "$1" && return
	echo enter ip net
	echo
	echo -n 'ipcalc> '

	while
	read -r i
	do
		\ipcalc "$i"
		echo
		echo -n 'ipcalc> '

	done
}
alias ipcalc=ipcalced
digged() {
	\dig +nocmd +nocomments +noquestion +nostats "${@}"|column -t
}
alias dig=digged
drilled() {
    \drill -T "${@}" | column -t | sed 's/IN/=&/' | column -t -s "="
}
alias drill=drilled
# shellcheck disable=SC2118
drillet() {
    \drill "${@}" |& grep "Query time"
}
alias drillt=drillet
getip() {
	\dig "$1" +short | xclip && xclip -o
}
rdns() {
	\dig -x "$(\dig "$1" +short)" +short
}
bgpmon() {
    [[ $# -eq 1 ]] && whois -h whois.bgpmon.net "$1" && return
	echo enter ip/domain for whois.bgpmon.net query
	echo
	echo -n 'bgpmon> '

	while
	read -r i
	do
		whois -h whois.bgpmon.net "$i" | grep -v ^%
		echo
		echo -n 'bgpmon> '
	done
}
cymru() {
    [[ $# -eq 1 ]] && whois -h whois.cymru.com "$1" && return
	echo enter ip/ASN for whois.cymru.com query
	echo
	echo -n 'cymru> '

	while
	read -r i
	do
		whois -h whois.cymru.com "$i" | tail -1 | awk '{$2=$3=$4=""; print $0}'
		echo
		echo -n 'cymru> '
	done
}
radb() {
    [[ $# -eq 1 ]] && whois -h whois.radb.net "$1" && return
	echo enter ip/ASN for whois.radb.net query
	echo
	echo -n 'radb> '

	while
	read -r i
	do
		whois -h whois.radb.net "$i" | head -4
		echo
		echo -n 'radb> '

	done
}
radb-routes() {
    [[ $# != 1 ]] && echo 'enter domain nameto get all routes for its corresponding ASN' && exit 0
    _net=$(whois -h whois.radb.net -- "-i origin $(whois -h whois.cymru.com "$(host "$1" | grep address | awk '{print $NF}' | head -1)" | tail -1 | awk '{$2=$3=$4=""; print $0}' | cut -d' ' -f1)" | grep ^route)
    echo "${_net}" | grep "route:" | awk '{print $2}' | sed 's/\([[:alnum:]]\+\)[:.]/\1 @/' | sed 's/.\+/\L&/g' | sort -nk1,1 | sed 's/ @/./'
    echo
    echo "${_net}" | grep "route6:" | awk '{print $2}' | sed 's/\([[:alnum:]]\+\)[:.]/\1 @/' | sed 's/.\+/\L&/g' | sort -k1,1 | sed 's/ @/:/'
}
geoip() {
	# needs package 'geoip-bin'
	echo enter ip to geoiplookup query
	echo
	echo -n 'geoip> '

	while
	read -r i
	do
		geoiplookup "$i" | sed -e 's/GeoIP Country Edition: //'
		echo
		echo -n 'geoip> '
	done
}
utrace() {
	if [[ $SHELL = '/bin/bash' ]]
	then
		typeset -A countrycodes=(
			["AD"]="Andorra"
			["AE"]="United Arab Emirates"
			["AF"]="Afghanistan"
			["AG"]="Antigua and Barbuda"
			["AI"]="Anguilla"
			["AL"]="Albania"
			["AM"]="Armenia"
			["AN"]="Netherlands Antilles"
			["AO"]="Angola"
			["AQ"]="Antarctica"
			["AR"]="Argentina"
			["AS"]="American Samoa"
			["AT"]="Austria"
			["AU"]="Australia"
			["AW"]="Aruba"
			["AZ"]="Azerbaijan"
			["BA"]="Bosnia and Herzegovina"
			["BB"]="Barbados"
			["BD"]="Bangladesh"
			["BE"]="Belgium"
			["BF"]="Burkina Faso"
			["BG"]="Bulgaria"
			["BH"]="Bahrain"
			["BI"]="Burundi"
			["BJ"]="Benin"
			["BM"]="Bermuda"
			["BN"]="Brunei Darussalam"
			["BO"]="Bolivia"
			["BR"]="Brazil"
			["BS"]="Bahamas"
			["BT"]="Bhutan"
			["BV"]="Bouvet Island"
			["BW"]="Botswana"
			["BY"]="Belarus"
			["BZ"]="Belize"
			["CA"]="Canada"
			["CC"]="Cocos/Keeling Islands"
			["CF"]="Central African Republic"
			["CG"]="Congo"
			["CH"]="Switzerland"
			["CI"]="Ivory Coast"
			["CK"]="Cook Islands"
			["CL"]="Chile"
			["CM"]="Cameroon"
			["CN"]="China"
			["CO"]="Colombia"
			["CR"]="Costa Rica"
			["CS"]="former Czechoslovakia"
			["CU"]="Cuba"
			["CV"]="Cape Verde"
			["CX"]="Christmas Island"
			["CY"]="Cyprus"
			["CZ"]="Czech Republic"
			["DE"]="Germany"
			["DJ"]="Djibouti"
			["DK"]="Denmark"
			["DM"]="Dominica"
			["DO"]="Dominican Republic"
			["DZ"]="Algeria"
			["EC"]="Ecuador"
			["EE"]="Estonia"
			["EG"]="Egypt"
			["EH"]="Western Sahara"
			["ER"]="Eritrea"
			["ES"]="Spain"
			["ET"]="Ethiopia"
			["FI"]="Finland"
			["FJ"]="Fiji"
			["FK"]="Falkland Islands / Malvinas"
			["FM"]="Micronesia"
			["FO"]="Faroe Islands"
			["FR"]="France"
			["FX"]="France, Metropolitan"
			["GA"]="Gabon"
			["GB"]="Great Britain / UK"
			["GD"]="Grenada"
			["GE"]="Georgia"
			["GF"]="French Guiana"
			["GH"]="Ghana"
			["GI"]="Gibraltar"
			["GL"]="Greenland"
			["GM"]="Gambia"
			["GN"]="Guinea"
			["GP"]="Guadeloupe"
			["GQ"]="Equatorial Guinea"
			["GR"]="Greece"
			["GS"]="S. Georgia and S. Sandwich Isls."
			["GT"]="Guatemala"
			["GU"]="Guam"
			["GW"]="Guinea-Bissau"
			["GY"]="Guyana"
			["HK"]="Hong Kong"
			["HM"]="Heard and McDonald Islands"
			["HN"]="Honduras"
			["HR"]="Croatia"
			["HT"]="Haiti"
			["HU"]="Hungary"
			["ID"]="Indonesia"
			["IE"]="Ireland"
			["IL"]="Israel"
			["IN"]="India"
			["IO"]="British Indian Ocean Territory"
			["IQ"]="Iraq"
			["IR"]="Iran"
			["IS"]="Iceland"
			["IT"]="Italy"
			["JM"]="Jamaica"
			["JO"]="Jordan"
			["JP"]="Japan"
			["KE"]="Kenya"
			["KG"]="Kyrgyzstan"
			["KH"]="Cambodia"
			["KI"]="Kiribati"
			["KM"]="Comoros"
			["KN"]="Saint Kitts and Nevis"
			["KP"]="North Korea"
			["KR"]="South Korea"
			["KW"]="Kuwait"
			["KY"]="Cayman Islands"
			["KZ"]="Kazakhstan"
			["LA"]="Laos"
			["LB"]="Lebanon"
			["LC"]="Saint Lucia"
			["LI"]="Liechtenstein"
			["LK"]="Sri Lanka"
			["LR"]="Liberia"
			["LS"]="Lesotho"
			["LT"]="Lithuania"
			["LU"]="Luxembourg"
			["LV"]="Latvia"
			["LY"]="Libya"
			["MA"]="Morocco"
			["MC"]="Monaco"
			["MD"]="Moldova"
			["MG"]="Madagascar"
			["MH"]="Marshall Islands"
			["MK"]="Macedonia"
			["ML"]="Mali"
			["MM"]="Myanmar"
			["MN"]="Mongolia"
			["MO"]="Macau"
			["MP"]="Northern Mariana Islands"
			["MQ"]="Martinique"
			["MR"]="Mauritania"
			["MS"]="Montserrat"
			["MT"]="Malta"
			["MU"]="Mauritius"
			["MV"]="Maldives"
			["MW"]="Malawi"
			["MX"]="Mexico"
			["MY"]="Malaysia"
			["MZ"]="Mozambique"
			["NA"]="Namibia"
			["NC"]="New Caledonia"
			["NE"]="Niger"
			["NF"]="Norfolk Island"
			["NG"]="Nigeria"
			["NI"]="Nicaragua"
			["NL"]="Netherlands"
			["NO"]="Norway"
			["NP"]="Nepal"
			["NR"]="Nauru"
			["NT"]="Neutral Zone"
			["NU"]="Niue"
			["NZ"]="New Zealand"
			["OM"]="Oman"
			["PA"]="Panama"
			["PE"]="Peru"
			["PF"]="French Polynesia"
			["PG"]="Papua New Guinea"
			["PH"]="Philippines"
			["PK"]="Pakistan"
			["PL"]="Poland"
			["PM"]="St. Pierre and Miquelon"
			["PN"]="Pitcairn"
			["PR"]="Puerto Rico"
			["PT"]="Portugal"
			["PW"]="Palau"
			["PY"]="Paraguay"
			["QA"]="Qatar"
			["RE"]="Reunion"
			["RO"]="Romania"
			["RU"]="Russia"
			["RW"]="Rwanda"
			["SA"]="Saudi Arabia"
			["Sb"]="Solomon Islands"
			["SC"]="Seychelles"
			["SD"]="Sudan"
			["SE"]="Sweden"
			["SG"]="Singapore"
			["SH"]="St. Helena"
			["SI"]="Slovenia"
			["SJ"]="Svalbard and Jan Mayen Islands"
			["SK"]="Slovak Republic"
			["SL"]="Sierra Leone"
			["SM"]="San Marino"
			["SN"]="Senegal"
			["SO"]="Somalia"
			["SR"]="Suriname"
			["ST"]="Sao Tome and Principe"
			["SU"]="former USSR"
			["SV"]="El Salvador"
			["SY"]="Syria"
			["SZ"]="Swaziland"
			["TC"]="Turks and Caicos Islands"
			["TD"]="Chad"
			["TF"]="French Southern Territories"
			["TG"]="Togo"
			["TH"]="Thailand"
			["TJ"]="Tajikistan"
			["TK"]="Tokelau"
			["TM"]="Turkmenistan"
			["TN"]="Tunisia"
			["TO"]="Tonga"
			["TP"]="East Timor"
			["TR"]="Turkey"
			["TT"]="Trinidad and Tobago"
			["TV"]="Tuvalu"
			["TW"]="Taiwan"
			["TZ"]="Tanzania"
			["UA"]="Ukraine"
			["UG"]="Uganda"
			["UK"]="United Kingdom"
			["UM"]="US Minor Outlying Islands"
			["US"]="United States"
			["UY"]="Uruguay"
			["UZ"]="Uzbekistan"
			["VA"]="Vatican City State"
			["VC"]="Saint Vincent and the Grenadines"
			["VE"]="Venezuela"
			["VG"]="British Virgin Islands"
			["VI"]="U.S. Virgin Islands"
			["VN"]="Vietnam"
			["VU"]="Vanuatu"
			["WF"]="Wallis and Futuna Islands"
			["WS"]="Samoa"
			["YE"]="Yemen"
			["YT"]="Mayotte"
			["YU"]="Yugoslavia"
			["ZA"]="South Africa"
			["ZM"]="Zambia"
			["ZR"]="Zaire"
			["ZW"]="Zimbabwe"
			["COM"]="US Commercial"
			["EDU"]="US Educational"
			["GOV"]="US Government"
			["INT"]="International"
			["MIL"]="US Military"
			["NET"]="Network"
			["ORG"]="Non-Profit Organization"
			["ARPA"]="Arpanet"
			["NATO"]="Nato field")
	else
		echo '[-] need a bash v4 shell to run'
	fi

	echo "enter ip for whois country lookup"
	echo
	echo -en "utrace> "

    local stringlist=""
	while
	read -r i
	do
        l
		stringlist="$( whois "$i" | \grep -i country | cut -d':' -f2 | sed -e 's/ //g')"

		for j
		in ${stringlist}
		do
			echo -e "\e[33;1m$j \e[0m${countrycodes[$j]}"
		done
		echo
		echo -en "utrace> "
	done
}

asn() {
        nc whois.cymru.com 43 < <(dig +short "$*")
}





## CODE #####################################################################################################
#fixme add something for shellcheck here too
#https://www.shellcheck.net/wiki/SC1090
god() {
	[[ $# != 1 ]] && echo 'can only take a single argument'
	firefox --new-tab https://golang.org/pkg/"$1"

}
godc() {
	[[ $# != 1 ]] && echo 'can only take a single argument'
	firefox --new-tab https://godoc.org/?q="$1"
}
#fixme does this work?
runonfolderchange() {
	[[ $# == 0 ]] && printf "\n\nUSAGE: enter command to run when anything it the current folder was written"
	inotifywait -r -m . -e close_write | while read -r; do echo $'\e[38;5;220;1m'"RUNNING...:"$'\e[0m'; "${@}"; echo $'\e[38;5;220;1m'"... DONE."$'\e[0m\n'; done

}

runonchange() {
    [[ 0 -eq $# ]]&&printf "\nusage:\n\t%s FILE COMMAND_TO_RUN\n" "${FUNCNAME[0]}"&&return
    FILENAME="$1";shift
    while inotifywait -e modify "${FILENAME}" >/dev/null 2>&1||true
    do
        eval "$*"
        printf "\n===============\n\n"
    done
}


### this exits prior to running `dot` on the saved file and i have no clue why
#rundotpreview() {
#	[[ $# != 1 ]] && \
#		echo && \
#		echo "USAGE:" && \
#		echo "    ${FUNCNAME[0]} FILE.dot" && \
#		return
#	FORMAT=svg
#	DOTFILE=$1
#	IMGFILE=${DOTFILE%.dot}.$FORMAT
#	[[ -f $IMGFILE ]] || dot -T$FORMAT -o $IMGFILE $DOTFILE
#	firefox $IMGFILE
#	echo "["$'\e[37;1m'"+"$'\e[0m'"] inital setup done."
#	echo
#	while
#		inotifywait -e close_write $DOTFILE #2>/dev/null
#	do
#		date && \
#		dot -T$FORMAT -o $IMGFILE $DOTFILE && \
#		echo "["$'\e[32;1m'"+"$'\e[0m'"] PNG generated." || \
#		echo "["$'\e[31;1m'"-"$'\e[0m'"] PNG could not be generated."
#		echo
#	done
#}

rundotpreview(){
	[[ $# == 0 ]] && \
		echo && \
		echo "USAGE:" && \
		echo "    ${FUNCNAME[0]} FILE.dot" && \
		return
	FORMAT=png
	DOTFILE=$1
	IMGFILE=${DOTFILE%.dot}.$FORMAT
	while :
	do
		dot -T"$FORMAT" -o "$IMGFILE" "$DOTFILE"
		okular "$IMGFILE"
	done
}





## SCRAPYARD ################################################################################################
#TMUX
tmw() {
	tmux split-window -dh "$*"
}
tmwh() {
	tmux split-window -dv "$*"
}

getdiff() {
	sdiff -ds <(sudo cat "$1") <(sudo cat "$2") | colordiff
}
cmddiff() {
	[ ! $# -gt 1 ] && echo USAGE: cmddiff CMD PARAM \[ALT_PARAM\] && return
	CMD=$1
	PARAM=$2
	ALT_PARAM=${3:- }
	sdiff <(sudo "$CMD $PARAM") <(sudo "$CMD $ALT_PARAM") | colordiff
}
sshsdiff() {
	[ ! $# -eq 3 ] && echo USAGE: sshdiff HOST1 HOST2 'CMD' && return
	HOST1=$1
	HOST2=$2
	CMD=$3
	sdiff -ds <(ssh "$HOST1 $CMD") <(ssh "$HOST2 $CMD") | colordiff
}
# shellcheck disable=SC2029
sshwdiff() {
	[ ! $# -eq 3 ] && echo USAGE: sshdiff HOST1 HOST2 'CMD' && return
	HOST1="$1"
	HOST2="$2"
	CMD="$3"
	wdiff -n <(ssh "${HOST1}" "${CMD}") <(ssh "${HOST2}" "${CMD}") | colordiff
}

rpmextract() {
	rpm2cpio "$1" | cpio -idmv
}
# FIXME: most of these need to be thrown out
alias    et="vim ~/.todo2"
alias   ett="vim ~/.todo"
alias   eta="vim ~/.todo_agenda.org"
alias   etp="vim ~/.todo_prv"
alias  etpi="vim ~/.todo_install"
alias   ets="vim ~/.todo_srv"

# the commented out lines where for syncing these with upstream, syncthing will make these obsolete eventually
#k() {
#	#if ping -c1 -W1 prv &>/dev/null; then rsync -auq prv:/home/sjas/.kanban/ /home/sjas/.kanban; fi
#	kanban "${@}"
#	#if ping -c1 -W1 prv &>/dev/null; then rsync -aq /home/sjas/.kanban/ prv:/home/sjas/.kanban; fi
#}
