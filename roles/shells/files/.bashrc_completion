# bash autocompletion
#
# basically anything besides the notes autocompletion
#
# shellcheck shell=bash

## go
## virsh
## firewall-cmd





## go #######################################################################################################
_go() {
	local cur="${COMP_WORDS[COMP_CWORD]}"

	case "${COMP_WORDS[COMP_CWORD - 1]}" in
	"go")
		subcommands=" bug build clean doc env fix fmt generate get help install list mod run test tool version vet"
		#COMPREPLY=($(compgen -W "${subcommands}" -- "${cur}"))
		mapfile -t COMPREPLY < <(compgen -W "${subcommands}" -- "${cur}")
		;;
	*)
		files=$(find "${PWD}" -mindepth 1 -maxdepth 1 -type f -iname "*.go" -exec basename {} \;)
		dirs=$(find "${PWD}" -mindepth 1 -maxdepth 1 -type d -not -name ".*" -exec basename {} \;)
		repl="${files} ${dirs}"
		#COMPREPLY=($(compgen -W "${repl}" -- "${cur}"))
		mapfile -t COMPREPLY < <(compgen -W "${repl}" -- "${cur}")
		;;
	esac
	return 0
} &&
	complete -F _go go





## virsh ####################################################################################################
_contain_cmd() {
	local e f array1 array2
	local array1=("$1")
    local array2=("$2")

	for e in "${array1[@]}"; do
		for f in "${array2[@]}"; do
			if [[ "$e" == "$f" ]]
            then
				echo "$e"
				return
			fi
		done
	done

	echo "notfound"
	return
}

_virsh_list_networks() {
	local flag_all=$1 flags

	if [ "$flag_all" -eq 1 ]; then
		flags="--all"
	else flags="--inactive"; fi

	virsh -q net-list $flags | cut -d\  -f2 | awk '{print $1}'
}

_virsh_list_domains() {
	local flag_all=$1 flags

	if [ "$flag_all" -eq 1 ]; then
		flags="--all"
	else flags="--inactive"; fi

	virsh -q list $flags | cut -d\  -f7 | awk '{print $1}'
}

_virsh_list_pools() {
	local flag_all=$1 flags

	if [ "$flag_all" -eq 1 ]; then
		flags="--all"
	else flags="--inactive"; fi

	virsh -q pool-list $flags | cut -d\  -f2 | awk '{print $1}'
}

_virsh_list_ifaces() {
	local flag_all=$1 flags

	if [ "$flag_all" -eq 1 ]; then
		flags="--all"
	else flags="--inactive"; fi

	virsh -q iface-list $flags | cut -d\  -f2 | awk '{print $1}'
}

_virsh_list_nwfilters() {
	virsh -q nwfilter-list | cut -d\  -f4 | awk '{print $1}'
}

_virsh() {
	local cur prev cmds doms options nets pools cmd_helps
	local flag_all=1 array ret a b ifaces nwfilters files

	local COMPREPLY=()
	local cur="${COMP_WORDS[COMP_CWORD]}"
	local prev="${COMP_WORDS[COMP_CWORD - 1]}"

    # shellcheck disable=SC2116
	cmds=$(echo "$(virsh -h | grep '^    ' | cut -d\  -f5) $(virsh -h | grep '\--' | cut -d\  -f7 | cut -d= -f1)")
	cmd_helps=$(virsh help | grep '^    ' | cut -d\  -f5)

	case "$prev" in
	"--domain")
		local doms=
        doms=$(_virsh_list_domains "$flag_all")
		mapfile -t COMPREPLY < <(compgen -W "$doms" -- "$cur")
		return 0
		;;
	"--network")
		local nets=
        nets=$(_virsh_list_networks "$flag_all")
		local COMPREPLY < <(compgen -W "$nets" -- "$cur")
		return 0
		;;
	"--pool")
		local pools=
        pools=$(_virsh_list_pools "$flag_all")
		mapfile -t COMPREPLY < <(compgen -W "$pools" -- "$cur")
		return 0
		;;
	"--interface")
		local ifaces=
        ifaces=$(_virsh_list_ifaces "$flag_all")
		mapfile -t COMPREPLY < <(compgen -W "$ifaces" -- "$cur")
		return 0
		;;
	"--nwfilter")
		local nwfilters=
        nwfilters=$(_virsh_list_nwfilters)
		mapfile -t COMPREPLY < <(compgen -W "$nwfilters" -- "$cur")
		return 0
		;;
	"--file" | "--xml")
		local files=
        files=$(ls)
		mapfile -t COMPREPLY < <(compgen -W "$files" -- "$cur")
		return 0
		;;
	esac

	local array=
    array=$(
		IFS=$'\n'
		echo "${COMP_WORDS[*]}"
	)
	local ret=
    ret=$(_contain_cmd "$array" "$cmd_helps")

	if [[ "$ret" != "notfound" && "$ret" != "$cur" ]]; then
		a=$(virsh help "$ret" | grep '^    --' | cut -d\  -f5)
		b=$(virsh help "$ret" | grep '^    \[--' | cut -d\  -f5 | cut -d[ -f2 | cut -d] -f1)
		local options=
        options="$a $b"
		mapfile -t COMPREPLY < <(compgen -W "$options" -- "$cur")
		return 0
	fi

	case "$cur" in
	*)
		mapfile -t COMPREPLY < <(compgen -W "$cmds" -- "$cur")
		return 0
		;;
	esac
} &&
	complete -o default -F _virsh virsh





## firewall-cmd #############################################################################################
. /usr/share/bash-completion/completions/firewall-cmd && complete -F _firewall_cmd fw
